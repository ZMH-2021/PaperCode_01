import time

def init_state(plaintext, Nb):
    state = [[0] * 4 for _ in range(Nb)]
    for i in range(4):
        for j in range(4):
            state[j][i] = plaintext[i * 4 + j]
    return state


def m(x):
    x[0][0] = 123


# 字节代换
def sub_bytes(state, x):
    if x == 'state':
        for i in range(4):
            for j in range(4):
                state[i][j] = s_box[state[i][j]]
    elif x == 'key':
        for i in range(4):
            state[i] = s_box[state[i]]


# 轮密钥加
def add_round_key(state, round_key):
    for i in range(4):
        for j in range(4):
            state[j][i] ^= round_key[i][j]


def get_Nr(Nb, Nk):
    if Nk == 4:
        return 10
    elif Nk == 6:
        return 12
    elif Nk == 8:
        return 14
    else:
        raise ValueError("Nk大小无效")


# 密钥扩展
def key_expansion(key, Nk, Nb, Nr):
    W = [[0 for _ in range(4)] for _ in range(Nb * (Nr + 1))]
    for i in range(Nk):
        for j in range(4):
            W[i][j] = key[j + 4 * i]

    for I in range(Nk, Nb * (Nr + 1)):
        temp = W[I - 1][:]
        if I % Nk == 0:
            temp = Rotl(temp)
            sub_bytes(temp, 'key')
            temp = list_xor(temp, Rcon(I // Nk - 1))
        elif I % Nk == 4 and Nk > 6:
            sub_bytes(temp, 'key')
        W[I] = list_xor(W[I - Nk][:], temp)

    return W


def list_xor(a, b):
    if len(a) != len(b):
        raise ValueError("list长度不符")
    r = [x ^ y for x, y in zip(a, b)]
    return r


def Rotl(temp):
    return [temp[1], temp[2], temp[3], temp[0]]


def shift(x):
    t = [0] * 8
    t[1:8] = x[0:7]
    t[0] = x[7]
    return t


def Rcon(i):
    return [RC(i), 0, 0, 0]


def RC(i):
    if i == 0:
        return 1
    else:
        return xtime(RC(i - 1))


def shift_rows(state, Nb):
    if Nb == 4 or Nb == 6:
        bias = [0, 1, 2, 3]
    elif Nb == 6:
        bias = [0, 1, 3, 4]
    for i in range(1, 4):
        state[i] = state[i][bias[i]:] + state[i][:bias[i]]


# 列混淆
def mix_columns(state):
    for i in range(4):
        col = [state[j][i] for j in range(4)]
        col = mix_single_column(col)
        for j in range(4):
            state[j][i] = col[j]


# 单列混淆
def mix_single_column(col):
    a0, a1, a2, a3 = col[0], col[1], col[2], col[3]
    b0, b1, b2, b3 = 2, 1, 1, 3
    c0 = get_c(a0, b0) ^ get_c(a3, b1) ^ get_c(a2, b2) ^ get_c(a1, b3)
    c1 = get_c(a1, b0) ^ get_c(a0, b1) ^ get_c(a3, b2) ^ get_c(a2, b3)
    c2 = get_c(a2, b0) ^ get_c(a1, b1) ^ get_c(a0, b2) ^ get_c(a3, b3)
    c3 = get_c(a3, b0) ^ get_c(a2, b1) ^ get_c(a1, b2) ^ get_c(a0, b3)
    col = [c0, c1, c2, c3]
    return col


def get_c(a, b):
    if b == 1:
        return a
    elif b == 2:
        return xtime(a)
    elif b == 3:
        return xtime(a) ^ a
    elif b == 9:
        return xtime(xtime(xtime(a))) ^ a
    elif b == 11:
        return xtime(xtime(xtime(a))) ^ a ^ xtime(a)
    elif b == 13:
        return xtime(xtime(xtime(a))) ^ xtime(xtime(a)) ^ a
    elif b == 14:
        return xtime(xtime(xtime(a))) ^ xtime(xtime(a)) ^ xtime(a)


# 有限域上的乘法
def xtime(x):
    return ((x << 1) ^ (0x11B if (x & 0x80) else 0x00)) & 0xFF


# AES S-Box
s_box = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]


def Inv_mix_columns(state):
    for i in range(4):
        col = [state[j][i] for j in range(4)]
        col = Inv_mix_single_column(col)
        for j in range(4):
            state[j][i] = col[j]


def Inv_mix_single_column(col):
    a0, a1, a2, a3 = col[0], col[1], col[2], col[3]
    b0, b1, b2, b3 = 14, 9, 13, 11
    c0 = get_c(a0, b0) ^ get_c(a3, b1) ^ get_c(a2, b2) ^ get_c(a1, b3)
    c1 = get_c(a1, b0) ^ get_c(a0, b1) ^ get_c(a3, b2) ^ get_c(a2, b3)
    c2 = get_c(a2, b0) ^ get_c(a1, b1) ^ get_c(a0, b2) ^ get_c(a3, b3)
    c3 = get_c(a3, b0) ^ get_c(a2, b1) ^ get_c(a1, b2) ^ get_c(a0, b3)
    col = [c0, c1, c2, c3]
    return col


def Inv_key_expansion(key, Nk, Nb, Nr):
    round_keys = key_expansion(key, Nk, Nb, Nr)
    for i in range(4, Nr * Nb):
        round_keys[i][:] = Inv_mix_single_column(round_keys[i][:])
    return round_keys


def Inv_sub_bytes(state, x):
    if x == 'state':
        for i in range(4):
            for j in range(4):
                state[i][j] = inverse_s_box[state[i][j]]
    elif x == 'key':
        for i in range(4):
            state[i] = inverse_s_box[state[i]]


def Inv_shift_rows(state, Nb):
    if Nb == 4 or Nb == 6:
        bias = [0, Nb - 1, Nb - 2, Nb - 3]
    elif Nb == 6:
        bias = [0, Nb - 1, Nb - 3, Nb - 4]
    for i in range(1, 4):
        state[i] = state[i][bias[i]:] + state[i][:bias[i]]


inverse_s_box = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]


def aes_encrypt(plaintext, key):
    Nb = int(len(plaintext) / 4)
    Nk = int(len(key) / 4)
    Nr = get_Nr(Nb, Nk)

    state = init_state(plaintext, Nb)
    round_keys = key_expansion(key, Nk, Nb, Nr)

    add_round_key(state, round_keys[0:4][:])

    for round_num in range(1, Nr):
        sub_bytes(state, 'state')
        shift_rows(state, Nb)
        mix_columns(state)
        add_round_key(state, round_keys[4 * round_num:4 * round_num + 4][:])

    # 最后一轮
    round_num += 1
    sub_bytes(state, 'state')
    shift_rows(state, Nb)
    add_round_key(state, round_keys[4 * round_num:4 * round_num + 4][:])

    ciphertext = [hex(state[j][i])[2:].zfill(2).zfill(2) for i in range(4) for j in range(Nb)]

    return ciphertext


def aes_decrypt(ciphertext, key):
    Nb = int(len(ciphertext) / 4)
    Nk = int(len(key) / 4)
    Nr = get_Nr(Nb, Nk)

    state = init_state(ciphertext, Nb)

    round_keys = Inv_key_expansion(key, Nk, Nb, Nr)

    add_round_key(state, round_keys[Nr * 4:Nr * 4 + 4][:])

    for round_num in range(Nr - 1, 0, -1):
        Inv_sub_bytes(state, 'state')
        Inv_shift_rows(state, Nb)
        Inv_mix_columns(state)
        add_round_key(state, round_keys[4 * round_num:4 * round_num + 4][:])

    # 最后一轮
    round_num -= 1
    Inv_sub_bytes(state, 'state')
    Inv_shift_rows(state, Nb)
    add_round_key(state, round_keys[4 * round_num:4 * round_num + 4][:])
    plaintext = [hex(state[j][i])[2:].zfill(2) for i in range(4) for j in range(Nb)]
    return plaintext


def run(task_size_kb):
    key = [
        0x00, 0x01, 0x20, 0x01,
        0x71, 0x01, 0x98, 0xae,
        0xda, 0x79, 0x17, 0x14,
        0x60, 0x15, 0x35, 0x94
    ]
    # 明文（16字节）
    plaintext = [
        0x00, 0x01, 0x00, 0x01,
        0x01, 0xa1, 0x98, 0xaf,
        0xda, 0x78, 0x17, 0x34,
        0x86, 0x15, 0x35, 0x66
    ]
    # print("原始明文:")
    # print(plaintext)
    # # 加密
    # print("加密后的结果:")
    # ciphertext = aes_encrypt(plaintext, key)
    # print(ciphertext)
    # # 解密
    # ciphertext = [int(x, 16) for x in ciphertext]
    # print("解密后的结果:")
    # decrypttext = aes_decrypt(ciphertext, key)
    # print(decrypttext)

    t1 = 0
    t2 = 0

    times = 100
    for i in range(times):
        start = time.perf_counter()
        ciphertext = aes_encrypt(plaintext, key)
        end = time.perf_counter()

        t1 = t1 + end - start

        ciphertext = [int(x, 16) for x in ciphertext]
        start = time.perf_counter()
        decrypttext = aes_decrypt(ciphertext, key)
        end = time.perf_counter()
        t2 = t2 + end - start

    p_to_c = 0.001
    mul = task_size_kb * 1024 / 16
    return_time = (t1 + t2) / times * mul * p_to_c

    return return_time
    # print(f'{times}次加解密时间:')
    # print(f' {times} times encryption time t1: {t1}s')
    # print(f' {times} times decryption time t2: {t2}s')
    # print('加解密速度:')
    # print(' encryption speed: %s kb/s' % (128 * times / 1024 / t1))
    # print(' decryption speed: %s kb/s' % (128 * times / 1024 / t2))


if __name__ == "__main__":
    # 128位密钥（16字节）
    # key = [
    #     0x00, 0x01, 0x20, 0x01,
    #     0x71, 0x01, 0x98, 0xae,
    #     0xda, 0x79, 0x17, 0x14,
    #     0x60, 0x15, 0x35, 0x94
    # ]
    # # 明文（16字节）
    # plaintext = [
    #     0x00, 0x01, 0x00, 0x01,
    #     0x01, 0xa1, 0x98, 0xaf,
    #     0xda, 0x78, 0x17, 0x34,
    #     0x86, 0x15, 0x35, 0x66
    # ]

    t = run(20)
    print(t)
